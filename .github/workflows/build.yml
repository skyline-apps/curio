name: Build and Deploy

on: [push, pull_request]

jobs:
  check-app:
    name: Check app (lint, test, build)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: 'npm'
          cache-dependency-path: src/app/package-lock.json

      - name: Install lint rule
        working-directory: ./src/app/api/eslint-local-rules
        run: npm install

      - name: Install dependencies
        working-directory: ./src/app
        run: npm ci

      - name: Run lint
        working-directory: ./src/app
        run: npm run lint

      - name: Run tests
        working-directory: ./src/app
        run: npm run test

  deploy-staging:
    needs: check-app
    name: Deploy app (staging)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: 'npm'
          cache-dependency-path: src/app/package-lock.json

      - name: Install lint rule
        working-directory: ./src/app/api/eslint-local-rules
        run: npm install

      - name: Install dependencies
        working-directory: ./src/app
        run: npm ci

      - name: Build for staging
        working-directory: ./src/app
        run: npm run build -- --mode staging
        env:
          CLOUDFLARE_ENV: staging
          VITE_CURIO_URL: ${{ vars.VITE_CURIO_URL }}
          VITE_POSTHOG_HOST: ${{ vars.VITE_POSTHOG_HOST }}
          VITE_POSTHOG_KEY: ${{ vars.VITE_POSTHOG_KEY }}
          VITE_SUPABASE_URL: ${{ vars.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ vars.VITE_SUPABASE_ANON_KEY }}
          VITE_BUILD_HASH: ${{ github.sha }}

      - name: Deploy to Cloudflare (staging)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: 'src/app'
          command: deploy

      - name: Run database migrations
        working-directory: ./src/app
        run: POSTGRES_URL=${{ secrets.POSTGRES_URL }} npm run db:migrate

  deploy-prod:
    needs: check-app
    name: Deploy app (production)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: 'npm'
          cache-dependency-path: src/app/package-lock.json

      - name: Install lint rule
        working-directory: ./src/app/api/eslint-local-rules
        run: npm install

      - name: Install dependencies
        working-directory: ./src/app
        run: npm ci

      - name: Build for production
        working-directory: ./src/app
        run: npm run build -- --mode prod
        env:
          CLOUDFLARE_ENV: prod
          VITE_CURIO_URL: ${{ vars.VITE_CURIO_URL }}
          VITE_POSTHOG_HOST: ${{ vars.VITE_POSTHOG_HOST }}
          VITE_POSTHOG_KEY: ${{ vars.VITE_POSTHOG_KEY }}
          VITE_SUPABASE_URL: ${{ vars.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ vars.VITE_SUPABASE_ANON_KEY }}
          VITE_BUILD_HASH: ${{ github.sha }}

      - name: Deploy to Cloudflare (production)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: 'src/app'
          command: deploy

      - name: Run database migrations
        working-directory: ./src/app
        run: POSTGRES_URL=${{ secrets.POSTGRES_URL }} npm run db:migrate

  check-web:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.9.0"

      - name: WEB - Build custom lint rules
        working-directory: ./src/web/eslint-local-rules
        run: npm install && npm run build

      - name: WEB - Install dependencies
        working-directory: ./src/web
        run: npm install

      - name: WEB - Run lint
        working-directory: ./src/web
        run: npm run lint

      - name: WEB - Run build
        working-directory: ./src/web
        run: npm run build

      - name: WEB - Run tests
        working-directory: ./src/web
        run: npm run test
